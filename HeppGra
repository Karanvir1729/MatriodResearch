from itertools import permutations

def superficial_degree_of_convergence(graph, d):
    superficial_degree = 0
    n = len(graph.edges())
    crk = len(graph.edges()) - len(graph.vertices()) + len(graph.connected_components())
    for e in graph.edges():
        
        superficial_degree += e[2] - (0.5 * d * crk)
   
    return superficial_degree

def hepp_bound(graph):
    n = len(graph.edges())
    h = 0
    crk = len(graph.edges()) - len(graph.vertices()) + len(graph.connected_components())
    if crk < 1: 
       
        d = 0
    else:     
        d = 2 * sum([i[2] for i in graph.edges()])/ crk
    for subgraph in permutations(graph.edges(), n): 
        denom = 1
        for i in range(1, n):
            denom *= superficial_degree_of_convergence(Graph(list(subgraph[:i])), d)
        h += Rational(1/denom)
    return h
# Example usage
graph_edges = [(1, 2, 1), (1, 3, 1), (2, 3, 1), (2, 4, 1), (3, 4, 1)]
G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

G = graphs.CycleGraph(4)

# Getting the edges
edges = G.edges()
newE = []
for e in edges: 
    newE.append((e[0], e[1],1))

G = Graph(newE)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

# Example usage
graph_edges = [(1, 2, 1), (1, 3, 1), (2, 3, 1)]

G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

graph_edges = [(1, 2, 1), (3, 4, 1)]

G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)
