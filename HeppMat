from itertools import permutations

def superficial_degree_of_convergence(matroid, subset, d, weights):
    superficial_degree = 0
    n = len(matroid.groundset())
    crk = len(subset) - matroid.rank(subset)
    for e in subset:
        superficial_degree += weights[e] 
       
    return superficial_degree - (0.5 * d * crk)

def hepp_bound(matroid, weights):
    n = len(matroid.groundset())
    h = 0
    crk = len(matroid.groundset()) - matroid.rank()
    if crk < 1: 
        d = 0
        return 0
    else:     
        d = 2 * sum([i for i in weights.values()])/ crk
    for subset in permutations(matroid.groundset(), n): 
        denom = 1
        for i in range(1, n):
            denom *= superficial_degree_of_convergence(matroid, list(subset[:i]), d, weights)
        h += Rational(1/denom)
    return h
# Example usage
ground_set = [1, 2, 3]

# Define the independent sets
independent_sets = [[1,2], [1,3], [2,3]]
# Create the matroid
M = Matroid(ground_set, independent_sets)
print(hepp_bound(M, {1:1,2:1,3:1}))
k4 = [[0, 1, 2], [0, 1, 4], [0, 1, 5], [0, 2, 3], [0, 2, 5], [0, 3, 4], [0, 3, 5], [0, 4, 5], [1, 2, 3], [1, 2, 4],
      [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5]]
ground_set = [0,1, 2, 3,4,5]
M = Matroid(ground_set, k4)
print(hepp_bound(M, {0:1, 1:1,2:1,3:1, 4:1, 5:1}))
