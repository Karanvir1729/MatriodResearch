def is_bridgeless(graph):
    """
    Check if a given graph is bridgeless.
    """
    for edge in graph.edges():
        H = graph.copy()
        H.delete_edge(edge)
        if not H.is_connected():
            return False
    return True

def all_edge_induced_subgraphs(G):
    """
    Generate all edge-induced subgraphs of a given graph G.
    """
    subgraphs = []
    edges = G.edges()
    for subgraph_edges in Subsets(edges):
        H = Graph()
        for e in subgraph_edges:
            H.add_edge(e[0], e[1])
        if len(H.edges()) > 0:  # Exclude empty subgraphs
            subgraphs.append(H)
    return subgraphs

def bridgeless_subgraphs(G):
    """
    Find all bridgeless subgraphs of a given graph G.
    """
    subgraphs = all_edge_induced_subgraphs(G)
    bridgeless_subgraphs = [H for H in subgraphs if is_bridgeless(H)]
    return bridgeless_subgraphs

# Example usage
G = Graph([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4)])
bridgeless = bridgeless_subgraphs(G)
for i, H in enumerate(bridgeless):
    print(f"Bridgeless subgraph {i+1}: {H.edges(labels=False)}")
print(f"Total number of bridgeless subgraphs: {len(bridgeless)}")
