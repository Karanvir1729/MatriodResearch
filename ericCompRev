from itertools import permutations
from itertools import combinations
def superficial_degree_of_convergence(matroid, subset, d, weights):
    superficial_degree = 0
    n = len(matroid.groundset())
    crk = len(subset) - matroid.rank(subset)
   
    for e in subset:
        superficial_degree += weights[e] 
    return superficial_degree - (0.5 * d * crk)

def hepp_bound(matroid, weights):
    n = len(matroid.groundset())
    h = 0
    crk = len(matroid.groundset()) - matroid.rank()
    if crk < 1: 
        d = 0
        return 0
    else:     
        d = 2 * sum([i for i in weights.values()])/ crk
    for subset in permutations(matroid.groundset(), n): 
        denom = 1
        for i in range(1, n):
            denom *= superficial_degree_of_convergence(matroid, list(subset[:i]), d, weights)
        h += Rational(1/denom)
    return h


def kirchhoff_polynomial(ground_set, basis):
      
    variables = ['x' + str(i) for i in range(1, len(ground_set) + 1)]
    R = PolynomialRing(QQ, variables)
    K = 0
    
    for base in basis:
        curr = R.one()
        for element in ground_set:
            if element not in base:
                index = element
                x_i = R.gen(index)
                curr *= x_i
        K += curr
    
    return K


#########Topical polynomial 
ground_set = [0, 1, 2, 3, 4]
combs = combinations(ground_set, 3)
independent_sets = [[c[i] for i in range(3)] for c in combs]
print(kirchhoff_polynomial(ground_set, independent_sets))

###################################### Hepp bound

ground_set = [1, 2, 3,4,5]
combs = combinations(ground_set, 3)
independent_sets = [[c[i] for i in range(3)] for c in combs]
M = Matroid(ground_set, independent_sets)
print(hepp_bound(M, {1:1,2:1,3:1, 4:1, 5:1}))
