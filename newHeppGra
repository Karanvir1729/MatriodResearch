from itertools import permutations
from sage.graphs.connectivity import bridges

def superficial_degree_of_convergence(graph, d):
    
    n = len(graph.edges())
    crk = len(graph.edges()) - len(graph.vertices()) + len(graph.connected_components())
    
    return n - crk

def hepp_bound(graph):
    n = len(graph.edges())
    h = 0
    crk = len(graph.edges()) - len(graph.vertices()) + len(graph.connected_components())
    if crk < 1: 
        d = 0
    else:     
        d = 2 * sum([i[2] for i in graph.edges()])/ crk
    for i in range(1, n + 1):  # Iterate over all possible sizes of subgraphs
        for subgraph_edges in permutations(graph.edges(), i):
            subgraph_object = Graph(list(subgraph_edges))
            if list(bridges(subgraph_object)) != []:
                continue
            denom = 1
            for j in range(1, n + 1):
                denom *= superficial_degree_of_convergence(subgraph_object, d)
            h += 1 / denom
    return h

# Example usage
graph_edges = [(1, 2, 1), (1, 3, 1), (2, 3, 1), (2, 4, 1), (3, 4, 1)]
G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

G = graphs.CycleGraph(4)

# Getting the edges
edges = G.edges()
newE = []
for e in edges: 
    newE.append((e[0], e[1], 1))

G = Graph(newE)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

graph_edges = [(1, 2, 1), (1, 3, 1), (2, 3, 1)]
G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)

graph_edges = [(1, 2, 1), (3, 4, 1)]
G = Graph(graph_edges)
hepp = hepp_bound(G)
print("Hepp bound:", hepp)
